using EncryptedConnection;
using RSA_Standard;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {

            //Sample of RSA and AES enctyption, using public key generated by server.

            var settings = new Settings()
            {
                SetRunmode = Settings.RunMode.Server,
                SetRSALenght = Settings.RSALenght.Low
            };

            //Server generates a rsa crypto using private and public key.
            //The public key can only be used to encrypt data not decrypt.
            var server = new CryptoCommunication(settings);
            var publicRSAKey = server.RsaPublicKey;

            Console.WriteLine($"public rsa key {publicRSAKey}");
            Console.WriteLine("This is the public key that is used by clients.");


            
            var settings2 = new Settings()
            {
                SetRunmode = Settings.RunMode.Client,
                SetRSALenght = Settings.RSALenght.Low,
                publicRSAkey = publicRSAKey
                
            };

            //client needs a public key from server
            var client = new CryptoCommunication(settings2);
            //client generates a session key and encrypt it with server public rsa key.
            var clientGeneratedSessionKey = client._publicSessionKey;

            Console.WriteLine();
            Console.WriteLine($"session key {Encoding.UTF8.GetString(clientGeneratedSessionKey)}");

            //server uses encrypted session key and decypt it using its private rsa decrypt key.
            server._publicSessionKey = clientGeneratedSessionKey;

            
            




            //Setup complete.
            while (true)
            {
                //server and client have now exchanged a session key that was encrypted with server generated rsa public key,
                //futher comunicatuin uses aes-256 encryption.

                Console.WriteLine("Type message to encrypt from server:");

                var dataToEnctypt = Encoding.UTF8.GetBytes(Console.ReadLine());
                var encData = server.EncryptData(dataToEnctypt); //server encrypted message
                var clientData = client.DecryptData(encData); //client decrypted.

                //Validate data..
                Console.WriteLine("Validating data.." );
                
                if (Compare(clientData, dataToEnctypt))
                    Console.WriteLine("data compare ok.");
                else
                    Console.WriteLine("data dont match");


                Console.WriteLine($"Message from server: {Encoding.UTF8.GetString(clientData)}");


                Console.WriteLine("Type message to encrypt from client:");
                var dataToEnctypt2 = Encoding.UTF8.GetBytes(Console.ReadLine());
                var encData2 = client.EncryptData(dataToEnctypt2); //client encrypted message
                var serverData = server.DecryptData(encData2); //server decrypted.

                Console.WriteLine("Validating data..");

                if (Compare(dataToEnctypt2, serverData))
                    Console.WriteLine("data compare ok.");
                else
                    Console.WriteLine("data dont match");

                Console.WriteLine($"Message from client: {Encoding.UTF8.GetString(serverData)}");




            }
        }
        public static bool Compare(byte[] arr1, byte[] arr2)
        {
            var reslult = arr1.Length == arr2.Length;

            for (int i = 0; i < arr1.Length && i < arr2.Length; i++)
            {
                reslult &= arr1[i] == arr2[i];
            }
            return reslult;
        }
    }
}
